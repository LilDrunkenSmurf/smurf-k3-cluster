---
# yaml-language-server: $schema=https://lds-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app victoria-metrics
spec:
  interval: 30m
  chart:
    spec:
      chart: victoria-metrics-k8s-stack
      version: 0.23.3
      sourceRef:
        kind: HelmRepository
        name: victoria-metrics
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: prometheus-operator-crds
      namespace: observability
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    fullnameOverride: *app
    victoria-metrics-operator:
      enabled: true
      operator:
        disable_prometheus_converter: false # Ensure we keep enabled the converter to sync prom rules to VM rules
        enable_converter_ownership: true # Required to allow VM to remove VM rules it imports if a prometheus rule is deleted

   # Prepared sets of default rules
    # Adjust to what scraping functions you have enabled
    # i.e. if you dont have kubeapisever setup & enabled, disable
    #   the kubeApiserver rules below
    defaultRules:
      create: true
      rules:
        etcd: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubelet: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeScheduler: true
        kubeStateMetrics: true
        network: true
        node: true
        vmagent: true
        vmsingle: true
        vmhealth: true
        alertmanager: true

    defaultDashboardsEnabled: true
    experimentalDashboardsEnabled: true

    vmsingle:
      enabled: true
      spec:
        extraArgs:
          dedup.minScrapeInterval: 30s
          maxLabelsPerTimeseries: "90"
          search.minStalenessInterval: 5m
          vmalert.proxyURL: http://vmalert-victoria-metrics.observability.svc.cluster.local:8080
        retentionPeriod: 1y
        storage:
          storageClassName: ceph-block
          resources:
            requests:
              storage: 50Gi
          accessModes:
            - ReadWriteOnce
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - victoria-metrics.${SECRET_DOMAIN}

    alertmanager:
      enabled: true
      spec:
        replicaCount: 2
        # configSecret: vm-alertmanager-secret
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: internal
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - vmalertmanager.${SECRET_DOMAIN}

    vmalert:
      enabled: true
      spec:
        replicaCount: 2
        externalLabels:
          cluster: ${CLUSTER_NAME}
        extraArgs:
          external.url: https://vmalert.${SECRET_DOMAIN}
        resources:
          requests:
            cpu: 50m
            memory: 128Mi
          limits:
            cpu: 150m
            memory: 256Mi
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: vmalert
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - vmalert.${SECRET_DOMAIN}

    vmagent:
      enabled: true
      spec:
        replicaCount: 1 #total pod count is replicaCount * shardCount
        shardCount: 2
        scrapeInterval: 30s
        externalLabels:
          cluster: ${CLUSTER_NAME}
        additionalScrapeConfigs:
          name: vm-additional-scrape-configs
          key: prometheus-additional.yaml
        resources:
          requests:
            cpu: 50m
            memory: 256Mi
          limits:
            cpu: 400m
            memory: 512Mi
        topologySpreadConstraints:
          - maxSkew: 1
            topologyKey: kubernetes.io/hostname
            whenUnsatisfiable: DoNotSchedule
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: vmagent
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - vmagent.${SECRET_DOMAIN}

    ######################
    ### dependencies #####
    ######################
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          annotations:
            grafana_folder: Kubernetes
          multicluster:
            etcd:
              enabled: true
      ingress:
        hosts: ["grafana.${SECRET_DOMAIN}"]

    prometheus-node-exporter:
      enabled: false
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node

    kube-state-metrics:
      enabled: false
      fullnameOverride: kube-state-metrics
      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]

    kubelet:
      enabled: true
      spec:
        metricRelabelConfigs:
          # Drop high cardinality labels
          - action: labeldrop
            regex: (uid)
          - action: labeldrop
            regex: (id|name)
          - action: drop
            source_labels: ["__name__"]
            regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)

    kubeApiServer:
      enabled: true
      spec:
        interval: 30s
        endpoints:
          - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            port: https
            scheme: https
            tlsConfig:
              caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              servername: kubernetes
        metricRelabelConfigs:
          # Drop high cardinality labels
          - sourceLabels: ["__name__"]
            regex: (apiserver|etcd|rest_client)_request(|_sli|_slo)_duration_seconds_bucket
            action: drop
          - sourceLabels: ["__name__"]
            regex: (apiserver_response_sizes_bucket|apiserver_watch_events_sizes_bucket)
            action: drop

    kubeControllerManager:
      enabled: true
      endpoints: &cp
        - 10.69.1.21
        - 10.69.1.22
        - 10.69.1.23
      spec:
        endpoints:
          - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            port: http-metrics
            scheme: https
            tlsConfig:
              caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              serverName: kubernetes
              insecureSkipVerify: true
    kubeDns:
      enabled: false #Use either this or coreDns
    coreDns:
      enabled: true
    kubeEtcd:
      enabled: true
      endpoints: *cp
      service:
        enabled: true
        port: 2381
        targetPort: 2381
      spec:
        endpoints:
          - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            port: http-metrics
    kubeScheduler:
      enabled: true
      endpoints: *cp
      spec:
        endpoints:
          - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
            port: http-metrics
            scheme: https
            tlsConfig:
              insecureSkipVerify: true
    kubeProxy:
      enabled: false
