---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  quick-strap:
    desc: Do a bunch of commands in a row because I'm really tired of this shit
    cmds:
      - task: apply-config
      - task: talos
      - task: apps
      - task: rook
    requires:
      vars: [CLUSTER]

  gen-secrets:
    desc: Generate the Talos secrets
    cmds:
      - talhelper -f {{.CLUSTER_DIR}}/talos/talconfig.yaml gensecret > {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml
      - task: :sops:.encrypt-file
        vars:
          FILE: "{{.CLUSTER_DIR}}/talos/talsecret.sops.yaml"
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
    status:
      - test -f "{{.CLUSTER_DIR}}/talos/talsecret.sops.yaml"

  gen-config:
    desc: Generate the Talos configs
    cmd: talhelper -c {{.CLUSTER_DIR}}/talos/talconfig.yaml genconfig -s {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml -o {{.CLUSTER_DIR}}/talos/clusterconfig
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
      - test -f {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml

  apply-config:
    desc: Apply the Talos config on a nodes for a new cluster
    dir: "{{.CLUSTER_DIR}}/talos/"
    cmd: talhelper gencommand apply --extra-flags=--insecure | bash
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/talconfig.yaml
      - test -f {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    cmds:
      - until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --output json --context {{.CLUSTER}} | jq --raw-output '.endpoints[]' | shuf -n 1
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig
      - which talosctl jq

  apps:
    desc: Bootstrap Apps [CLUSTER=main] [MODEL=required]
    prompt: Bootstrap apps into the Talos cluster?
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.CLUSTER_DIR}}/bootstrap/apps/templates/resources.yaml.j2 | kubectl apply --server-side --filename -
      - helmfile --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - helmfile --quiet --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml destroy --selector release=wipe-rook
    env:
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSL https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
      MODEL: '{{.MODEL}}'
      NODE_COUNT:
        sh: talosctl config info --output json | jq --raw-output '.nodes | length'
      VAULT: kubernetes # ¯\_(ツ)_/¯
    requires:
      vars: [CLUSTER, MODEL]
    preconditions:
      - op user get --me
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/templates/resources.yaml.j2
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/templates/wipe-rook.yaml.gotmpl
      - which curl jq helmfile kubectl op talosctl
